Problem: You are given an array prices where prices[i] is the price of a given stock on the i-th day. 
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
input:  prices = [7, 1, 5, 3, 6, 4]
output : maxProfit = 5

public int maxProfit(int[] prices) {
    if (prices == null || prices.length == 0) {
        return 0;
    }

    int minPrice = Integer.MAX_VALUE;
    int maxProfit = 0;

    for (int i = 0; i < prices.length; i++) {
        if (prices[i] < minPrice) {
            minPrice = prices[i];
        } else if (prices[i] - minPrice > maxProfit) {
            maxProfit = prices[i] - minPrice;
        }
    }

    return maxProfit;
}

Stock selling variations:

You are given an array prices where prices[i] is the price of a stock on the i-th day. You may buy and sell the stock multiple times (one share at a time).
You must sell before buying again. Your goal is to maximize total profit. Return the maximum profit you can achieve.

private static int getMaxProfitWithMultipleBuys(int[] a) {
    int n = a.length;
    if (a == null || n == 0) {
        throw new IllegalArgumentException("Please provide valid input");
    }

    int cumulativeProfit = 0;

    for (int i = 1; i < n; i++) {
        if (a[i] > a[i - 1]) {
            cumulativeProfit += a[i] - a[i - 1];
        }
    }

    return cumulativeProfit;
}

CoolDown period:

Explanation
    State: (i, buying)
    i = current day index
    buying = true → we can buy, else we can sell

    Transition:
    If buying → choose between buying today or cooldown
    If selling → choose between selling today (then cooldown for 1 day) or cooldown

Memoization: Stored in Map<String, Integer>

At each day i, you have choices:
If you can buy → either buy today or skip (cooldown)
If you can sell → either sell today or skip (cooldown)
This naturally forms a decision tree.

DFS simply means:
    Start from day 0
    Explore one branch of decisions all the way down (to the end of days)
    Backtrack and explore the other branch

import java.util.*;

public class Solution {
    public int maxProfit(int[] prices) {
        Map<String, Integer> memo = new HashMap<>();
        return dfs(0, true, prices, memo);
    }

    private int dfs(int i, boolean buying, int[] prices, Map<String, Integer> memo) {
        if (i >= prices.length) {
            return 0;
        }

        String key = i + "-" + buying;
        if (memo.containsKey(key)) {
            return memo.get(key);
        }

        // Option 1: Cooldown (skip this day)
        int cooldown = dfs(i + 1, buying, prices, memo);

        int ans;
        if (buying) {
            // Option 2: Buy today
            int buy = dfs(i + 1, false, prices, memo) - prices[i];
            ans = Math.max(buy, cooldown);
        } else {
            // Option 2: Sell today (then cooldown next day)
            int sell = dfs(i + 2, true, prices, memo) + prices[i];
            ans = Math.max(sell, cooldown);
        }

        memo.put(key, ans);
        return ans;
    }

    // Test
    public static void main(String[] args) {
        Solution sol = new Solution();
        int[] prices = {1, 2, 3, 0, 2};
        System.out.println(sol.maxProfit(prices)); // Expected output: 3
    }
}
